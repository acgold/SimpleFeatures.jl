var documenterSearchIndex = {"docs":
[{"location":"long_term_goals/#Goals","page":"Long-term goals","title":"Goals","text":"","category":"section"},{"location":"long_term_goals/","page":"Long-term goals","title":"Long-term goals","text":"Provide full support for simple features access\nProvide an intuitive workflow for reading, analyzing, manipulating, and writing vector GIS data in Julia\nAllow SimpleFeature objects to effectively function as DataFrames for most simple use cases","category":"page"},{"location":"long_term_goals/","page":"Long-term goals","title":"Long-term goals","text":"Inspired by the R package sf. This package is in Alpha and will change significantly in the future.","category":"page"},{"location":"getting_started/#Getting-Started","page":"Getting started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/#Load-SimpleFeatures.jl","page":"Getting started","title":"Load SimpleFeatures.jl","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"We'll load the package in these examples as SF, shorthand for SimpleFeatures","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"import SimpleFeatures as SF","category":"page"},{"location":"getting_started/#Read-and-write-data","page":"Getting started","title":"Read & write data","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Most GIS types can be read and written using the functions st_read and st_write, respectively.","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"x = SF.st_read(\"data/test.gpkg\")\n\nSimpleFeature\n---------\ngeomtype:  wkbPolygon\ncrs:       PROJCRS[\"NAD83(2011) / UTM zone 17N\",BASEGEOGCRS[\"NAD83(2011)\",DATUM[\"NAD83 (National Spatial Refere...\"\n---------\nfeatures:  \n1000×2 DataFrame\n  Row │ geom                          lyr.1 \n      │ sfgeom                        Int32 \n──────┼─────────────────────────────────────\n    1 │ POLYGON ((853787 3905499,...      1\n    2 │ POLYGON ((853800 3905499,...      1\n    3 │ POLYGON ((853803 3905499,...      1\n  ⋮   │              ⋮                  ⋮\n  998 │ POLYGON ((904045 3905468,...      1\n  999 │ POLYGON ((905355 3905468,...      1\n 1000 │ POLYGON ((905561 3905469,...      1\n                            994 rows omitted","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"SF.st_write(\"data/new_test.gpkg\", x)\n\n\"data/new_test.gpkg\"","category":"page"},{"location":"getting_started/#DataFrame-operations","page":"Getting started","title":"DataFrame operations","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Many common DataFrames operations work with SimpleFeature objects. If the operation you want (e.g., Grouped DataFrames operations) isn't offered yet, you can access and manipulate the DataFrame of the SimpleFeature object directly by appending .df to your object.","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Supported operations:","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Indexing\nselect(!)\ntransform(!)\nrename(!)\nsubset(!)\nnrow, ncol\ncombine\nfirst, last\neachrow (but you can just iterate on a SimpleFeature object b/c we internally convert DataFrameRows to DataFrames.)","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Check out DataFramesMeta.jl for some nice macros for many of these functions - they should work directly on SimpleFeature objects!","category":"page"},{"location":"getting_started/#Spatial-operations","page":"Getting started","title":"Spatial operations","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"SimpleFeatures offers some basic spatial functions and will offer more in future releases.","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Check out Reference for a full list of functions available functions. Below are a few examples.","category":"page"},{"location":"getting_started/#Cast-polygons-to-linestrings","page":"Getting started","title":"Cast polygons to linestrings","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"In this example, SimpleFeatures will cast each polygon to a multilinestring and then to a linestrings. Some polygons had holes (multiple lines per polygon), so the resulting DataFrame has more rows than the original. In cases such as this, SimpleFeatures adds a column of the geometry type + \"ID\" (e.g. _MultiLineStringID) that preserves which multigeometry type the split geometry belonged to.","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"lines = SF.st_cast(df, \"linestring\")\n\nSimpleFeature\n---------\ngeomtype:  wkbLineString\ncrs:       PROJCRS[\"NAD83(2011) / UTM zone 17N\",BASEGEOGCRS[\"NAD83(2011)\",DATUM[\"NAD83 (National Spatial Refere...\"\n---------\nfeatures:  \n1022×3 DataFrame\n  Row │ lyr.1  _MultiLineStringID  geom                         \n      │ Int32  Int64               sfgeom                       \n──────┼─────────────────────────────────────────────────────────\n    1 │     1                   1  LINESTRING (853787 390549...\n    2 │     1                   2  LINESTRING (853800 390549...\n    3 │     1                   3  LINESTRING (853803 390549...\n  ⋮   │   ⋮            ⋮                        ⋮\n 1020 │     1                 998  LINESTRING (904045 390546...\n 1021 │     1                 999  LINESTRING (905355 390546...\n 1022 │     1                1000  LINESTRING (905561 390546...\n                                               1016 rows omitted","category":"page"},{"location":"getting_started/#Buffer","page":"Getting started","title":"Buffer","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Using the linestrings from the st_cast example above, we will add a 10m buffer.","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"buffered_lines = SF.st_buffer(lines, 10) # buffer distance is in units of the crs. Meters in this example\n\nSimpleFeature\n---------\ngeomtype:  wkbPolygon\ncrs:       PROJCRS[\"NAD83(2011) / UTM zone 17N\",BASEGEOGCRS[\"NAD83(2011)\",DATUM[\"NAD83 (National Spatial Refere...\"\n---------\nfeatures:  \n1022×3 DataFrame\n  Row │ lyr.1  _MultiLineStringID  geom                         \n      │ Int32  Int64               sfgeom                       \n──────┼─────────────────────────────────────────────────────────\n    1 │     1                   1  POLYGON ((853787 3905509,...\n    2 │     1                   2  POLYGON ((853800 3905509,...\n    3 │     1                   3  POLYGON ((853803 3905509,...\n  ⋮   │   ⋮            ⋮                        ⋮\n 1020 │     1                 998  POLYGON ((904045 3905478,...\n 1021 │     1                 999  POLYGON ((905355 3905478,...\n 1022 │     1                1000  POLYGON ((905556.62823740...\n                                               1016 rows omitted","category":"page"},{"location":"getting_started/#Reproject","page":"Getting started","title":"Reproject","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Let's reproject the polygons we just made with st_buffer.","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"reprojected_buffer = SF.st_transform(x, GeoFormatTypes.EPSG(5070))\n\nSimpleFeature\n---------\ngeomtype:  wkbPolygon\ncrs:   5070\n---------\nfeatures:  \n1000×2 DataFrame\n  Row │ lyr.1  geom                         \n      │ Int32  sfgeom                       \n──────┼─────────────────────────────────────\n    1 │     1  POLYGON ((1693276.9257186...\n    2 │     1  POLYGON ((1693289.637015 ...\n    3 │     1  POLYGON ((1693292.5703908...\n  ⋮   │   ⋮                 ⋮\n  998 │     1  POLYGON ((1742412.4620032...\n  999 │     1  POLYGON ((1743692.7581942...\n 1000 │     1  POLYGON ((1743893.9246629...\n                            994 rows omitted","category":"page"},{"location":"getting_started/#Intersection","page":"Getting started","title":"Intersection","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Say we have two sets of features (two different SimpleFeature objects, x and y), and we'd like to find their intersection and preserve their traits. We can do this with st_intersection.","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"intersection = SF.st_intersection(x, y)\n\nSimpleFeature\n---------\ngeomtype:  wkbPolygon\ncrs:       PROJCRS[\"NAD83(2011) / UTM zone 17N\",BASEGEOGCRS[\"NAD83(2011)\",DATUM[\"NAD83 (National Spatial Refere...\"\n---------\nfeatures:  \n357×3 DataFrame\n Row │ lyr.1  lyr.1_1  geom                         \n     │ Int32  Int32    sfgeom                       \n─────┼──────────────────────────────────────────────\n   1 │     1        1  POLYGON ((853789 3905499,...\n  ⋮  │   ⋮       ⋮                  ⋮\n 357 │     0        0  POLYGON ((857155 3905468,...\n                                    355 rows omitted","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"In this example, y is a buffered subset of x, so both input objects had the same column \"lyr.1\". When this happens, a suffix will be added to the column from y and it will be joined with x.","category":"page"},{"location":"getting_started/#Area","page":"Getting started","title":"Area","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"I wonder what the area of overlap was from the Intersection example? Let's check it out! The result is in units of the crs.","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"area_list = SF.st_area(intersection)\n\n357-element Vector{Float64}:\n  2.0\n  2.0\n  2.0\n  2.0\n  1.0\n  1.0\n  ⋮\n 36.0\n  1.0\n  1.0\n  1.0\n  1.0\n  1.0","category":"page"},{"location":"getting_started/#Plotting","page":"Getting started","title":"Plotting","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Plot a SimpleFeature object using Plots. It will use an equal aspect ratio.","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"using Plots\n\nx = SF.st_read(\"example.gpkg\")\n\nplot(x)","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"If you want to specify the fill of geometries based on a column, pass the name of the column to fill_col. ","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Specify a color palette from ColorSchemes by passing a palette to fill.","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia  plot(x, fill = palette(:viridis), fill_col = :cool_value)","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [SimpleFeatures]","category":"page"},{"location":"reference/#SimpleFeatures.df_to_sf","page":"Reference","title":"SimpleFeatures.df_to_sf","text":"dftosf(x::DataFrame, crs::GFT.GeoFormat=GFT.EPSG(4326); geom_column=:geom)\n\nConvert a DataFrame containing a column of ArchGDAL geometries to a new SimpleFeature object. \n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleFeatures.sf_to_df-Tuple{SimpleFeatures.SimpleFeature}","page":"Reference","title":"SimpleFeatures.sf_to_df","text":"sftodf(x::SimpleFeature; geom_column=:geom)\n\nConvert a SimpleFeature object to a DataFrame containing a column of ArchGDAL geometries. \n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleFeatures.st_area-Tuple{SimpleFeatures.SimpleFeature}","page":"Reference","title":"SimpleFeatures.st_area","text":"st_area(x::SimpleFeature; geom_column=:geom)\n\nReturns a vector of geometry areas in units of the crs.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleFeatures.st_bbox-Tuple{SimpleFeatures.SimpleFeature}","page":"Reference","title":"SimpleFeatures.st_bbox","text":"st_bbox(x::SimpleFeature; geom_column=:geom)\n\nCreate a bounding box polygon for the provided SimpleFeature object. Resulting polygon is and AG.wkbPolygon type.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleFeatures.st_buffer-Tuple{SimpleFeatures.SimpleFeature, Real}","page":"Reference","title":"SimpleFeatures.st_buffer","text":"st_buffer(x::SimpleFeature, d::Number; geom_column=:geom)\nst_buffer(x::SimpleFeature, d::String; geom_column=:geom)\n\nCreate a new SimpleFeature object that is buffered by the provided distance d in units of the crs. d can be a number or a string representing the column of the SimpleFeature DataFrame that contains numbers to use for the buffer distance.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleFeatures.st_cast-Tuple{SimpleFeatures.SimpleFeature, String}","page":"Reference","title":"SimpleFeatures.st_cast","text":"st_cast(x::SimpleFeature, to::String; groupid::Union{String,Nothing}=nothing, geom_column=:geom, kwargs...)\n\nCast features geometries to the requested type (to). See below for the ordered list of to values. Supply a groupid for aggregating geometries by a variable. Any decomposition from a multigeometry type to a single geometry type will add a unique ID of the multigeometry object as a column (e.g., _MultiPolygonID) so the original multigeometry can be re-created later. \n\nHierarchy of to values:\n\n\"multipolygon\"\n\"polygon\"\n\"multilinestring\"\n\"linestring\"\n\"multipoint\"\n\"point\"\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleFeatures.st_centroid-Tuple{SimpleFeatures.SimpleFeature}","page":"Reference","title":"SimpleFeatures.st_centroid","text":"st_centroid(x::SimpleFeature; geom_column=:geom)\n\nCreate a SimpleFeature object of point centroids of the input geometries.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleFeatures.st_combine-Tuple{SimpleFeatures.SimpleFeature}","page":"Reference","title":"SimpleFeatures.st_combine","text":"st_combine(x::SimpleFeature; geom_column=:geom)\n\nCreate a new SimpleFeature object that has combined all features into the relevant multigeometry type. No attributes of the original object are returned.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleFeatures.st_difference-Tuple{SimpleFeatures.SimpleFeature, SimpleFeatures.SimpleFeature}","page":"Reference","title":"SimpleFeatures.st_difference","text":"st_difference(x::SimpleFeature, y::SimpleFeature; geom_column=:geom)\n\nCreate a new SimpleFeature object that is the difference of x and y in the geometry type of x.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleFeatures.st_disjoint-Tuple{SimpleFeatures.SimpleFeature, SimpleFeatures.SimpleFeature}","page":"Reference","title":"SimpleFeatures.st_disjoint","text":"st_disjoint(x::SimpleFeature, y::SimpleFeature; geom_column=:geom, sparse::Bool=true)\n\nReturns a sparse index list of disjoint features.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleFeatures.st_distance-Tuple{SimpleFeatures.SimpleFeature, SimpleFeatures.SimpleFeature}","page":"Reference","title":"SimpleFeatures.st_distance","text":"st_distance(x::SimpleFeature, y::SimpleFeature; geom_column=:geom)\n\nReturns a matrix of distances between each x and y geometry in units of the crs.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleFeatures.st_intersection-Tuple{SimpleFeatures.SimpleFeature, SimpleFeatures.SimpleFeature}","page":"Reference","title":"SimpleFeatures.st_intersection","text":"st_intersection(x::SimpleFeature, y::SimpleFeature; geom_column=:geom)\n\nCreate a new SimpleFeature object that is the intersection of x and y in the geometry type of y.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleFeatures.st_intersects-Tuple{SimpleFeatures.SimpleFeature, SimpleFeatures.SimpleFeature}","page":"Reference","title":"SimpleFeatures.st_intersects","text":"st_intersects(x::SimpleFeature, y::SimpleFeature; geom_column=:geom, sparse::Bool=true)\n\nReturns a sparse index list of intersecting features.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleFeatures.st_length-Tuple{SimpleFeatures.SimpleFeature}","page":"Reference","title":"SimpleFeatures.st_length","text":"st_length(x::SimpleFeature; geom_column=:geom)\n\nReturns a vector of geometry lengths in units of the crs.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleFeatures.st_nearest_points-Tuple{SimpleFeatures.SimpleFeature, SimpleFeatures.SimpleFeature}","page":"Reference","title":"SimpleFeatures.st_nearest_points","text":"st_nearest_points(x::SimpleFeature, y::SimpleFeature; geom_column=:geom)\n\nReturns a SimpleFeature object of lines between nearest points of each feature in x to y and columns indicating which row of x and y each line refers to.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleFeatures.st_segmentize-Tuple{SimpleFeatures.SimpleFeature, Real}","page":"Reference","title":"SimpleFeatures.st_segmentize","text":"st_segmentize(x::SimpleFeature, max_length::Number; geom_column=:geom)\n\nCreate a new SimpleFeature object whose segments have been sliced into segments no larger than the provided max_length in units of the crs. See ArchGDAL.segmentize! for more info\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleFeatures.st_simplify","page":"Reference","title":"SimpleFeatures.st_simplify","text":"st_simplify(x::SimpleFeature; geom_column=:geom)\n\nCreate a SimpleFeature object with simplified input geometries.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SimpleFeatures.st_transform-Tuple{SimpleFeatures.SimpleFeature, GeoFormatTypes.GeoFormat}","page":"Reference","title":"SimpleFeatures.st_transform","text":"st_transform(x::SimpleFeature, crs::GFT.GeoFormat; geom_column=:geom, order=:compliant)\n\nCreate a new SimpleFeature object that is projected to the provided crs.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleFeatures.st_union-Tuple{SimpleFeatures.SimpleFeature}","page":"Reference","title":"SimpleFeatures.st_union","text":"st_union(x::SimpleFeature; geom_column=:geom)\n\nCreate a SimpleFeature object that unions all input geometries.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleFeatures.st_write-Tuple{AbstractString, SimpleFeatures.SimpleFeature}","page":"Reference","title":"SimpleFeatures.st_write","text":"st_write(fn::AbstractString, table; layer_name=\"data\", geom_column=:geometry, crs::Union{GFT.GeoFormat,Nothing}=nothing, driver::Union{Nothing,AbstractString}=nothing, options::Vector{AbstractString}=[], geom_columns::Set{Symbol}=(:geometry))\n\nWrite the provided table to fn. The geom_column is expected to hold ArchGDAL geometries.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleFeatures.toProjJSON-Tuple{ArchGDAL.AbstractSpatialRef}","page":"Reference","title":"SimpleFeatures.toProjJSON","text":"toProjJSON(spref::AbstractSpatialRef)\n\nConvert this SRS into ProjJSON format.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SimpleFeatures.toWKT2-Tuple{ArchGDAL.AbstractSpatialRef}","page":"Reference","title":"SimpleFeatures.toWKT2","text":"toWKT2(spref::AbstractSpatialRef)\n\nConvert this SRS into WKT2 format.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SimpleFeatures","category":"page"},{"location":"#SimpleFeatures","page":"Home","title":"SimpleFeatures","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Link to GitHub Repo","category":"page"},{"location":"#Working-with-simple-feature-GIS-data-in-Julia","page":"Home","title":"Working with simple feature GIS data in Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Fast reading, analyzing, manipulating, and writing vector GIS data in Julia. This package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Works with feature data as a DataFrame \nStores coordinate reference system (crs) info with the DataFrame and uses it automatically\nUses a custom geometry type to interface with GDAL and GEOS for fast I/O and operations","category":"page"},{"location":"#About","page":"Home","title":"About","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The SimpleFeatures package aims to simplify working with geospatial data in Julia. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package currently offers some basic spatial operations (see Getting started and Reference), and more will be added in the future. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package creates a SimpleFeature custom type that effectively functions as a DataFrame containing feature data but also contains projection and geometry type info. See more below in the section \"How it works\".","category":"page"},{"location":"","page":"Home","title":"Home","text":"Example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"SimpleFeature\n---------\ngeomtype:  wkbPolygon\ncrs:       PROJCRS[\"NAD83(2011) / UTM zone 17N\",BASEGEOGCRS[\"NAD83(2011)\",DATUM[\"NAD83 (National Spatial Refere...\"\n---------\nfeatures:  \n1000×2 DataFrame\n  Row │ geom                          lyr.1 \n      │ sfgeom                        Int32 \n──────┼─────────────────────────────────────\n    1 │ POLYGON ((853787 3905499,...      1\n    2 │ POLYGON ((853800 3905499,...      1\n    3 │ POLYGON ((853803 3905499,...      1\n  ⋮   │              ⋮                  ⋮\n  998 │ POLYGON ((904045 3905468,...      1\n  999 │ POLYGON ((905355 3905468,...      1\n 1000 │ POLYGON ((905561 3905469,...      1\n                            994 rows omitted","category":"page"},{"location":"","page":"Home","title":"Home","text":"To directly access the DataFrame, crs info, or geometry info, just add .df, .crs, or .geomtype at the end of your SimpleFeature object's name.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Disclaimer: This package is very young and under active development. More tests and checks (e.g., making sure projections match before performing operations) need to be added. See License.md for additional details. ","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SimpleFeatures can be installed from the Pkg REPL (press ] in the Julia REPL):","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add SimpleFeatures","category":"page"},{"location":"","page":"Home","title":"Home","text":"Or install from GitHub for the latest:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"https://github.com/acgold/SimpleFeatures.jl.git\")","category":"page"},{"location":"how_it_works/#How-it-works","page":"How it works","title":"How it works","text":"","category":"section"},{"location":"how_it_works/#GIS-data-as-a-DataFrame","page":"How it works","title":"GIS data as a DataFrame","text":"","category":"section"},{"location":"how_it_works/","page":"How it works","title":"How it works","text":"SimpleFeatures reads vector GIS data from files and creates a DataFrame containing geometries and their attributes. ","category":"page"},{"location":"how_it_works/","page":"How it works","title":"How it works","text":"Each row is a feature, and geometry data for each feature are stored in the geom column. ","category":"page"},{"location":"how_it_works/","page":"How it works","title":"How it works","text":"Example:","category":"page"},{"location":"how_it_works/","page":"How it works","title":"How it works","text":"1000×2 DataFrame\n  Row │ geom                          lyr.1 \n      │ sfgeom                        Int32 \n──────┼─────────────────────────────────────\n    1 │ POLYGON ((853787 3905499,...      1\n    2 │ POLYGON ((853800 3905499,...      1\n    3 │ POLYGON ((853803 3905499,...      1\n  ⋮   │              ⋮                  ⋮\n  998 │ POLYGON ((904045 3905468,...      1\n  999 │ POLYGON ((905355 3905468,...      1\n 1000 │ POLYGON ((905561 3905469,...      1\n                            994 rows omitted","category":"page"},{"location":"how_it_works/#Metadata:-crs-and-geomtype","page":"How it works","title":"Metadata: crs and geomtype","text":"","category":"section"},{"location":"how_it_works/","page":"How it works","title":"How it works","text":"These metadata (.crs, .geomtype) are stored as a attributes within a SimpleFeature object and can be modified or accessed directly.","category":"page"},{"location":"how_it_works/","page":"How it works","title":"How it works","text":"Example::","category":"page"},{"location":"how_it_works/","page":"How it works","title":"How it works","text":"x.crs \n\nGeoFormatTypes.WellKnownText2{GeoFormatTypes.Unknown}(GeoFormatTypes.Unknown(), \"PROJCRS[\\\"NAD83(2011) / UTM zone 17N\\\",BASEGEOGCRS[\\\"NAD83(2011)\\\",DATUM[...","category":"page"},{"location":"how_it_works/","page":"How it works","title":"How it works","text":"x.geomtype\n\nwkbPolygon::OGRwkbGeometryType = 3","category":"page"},{"location":"how_it_works/","page":"How it works","title":"How it works","text":"Types:","category":"page"},{"location":"how_it_works/","page":"How it works","title":"How it works","text":"crs: GeoFormatTypes.GeoFormat\ngeomtype: ArchGDAL.OGRwkbGeometryType","category":"page"},{"location":"how_it_works/#Geometries-as-sfgeom-objects","page":"How it works","title":"Geometries as sfgeom objects","text":"","category":"section"},{"location":"how_it_works/","page":"How it works","title":"How it works","text":"Each row of the geom column is an sfgeom object that has two attributes:","category":"page"},{"location":"how_it_works/","page":"How it works","title":"How it works","text":"wkb: A vector (type Vector{UInt8}) of the Well-known binary (WKB) representation of the geometry.\nExample:   julia   93-element Vector{UInt8}:   0x01   0x03   0x00   0x00   0x00       ⋮   0x80   0xed   0xcb   0x4d   0x41\npreview: A string that shows an abbreviated Well-known text (WKT) string. \nExample: \njulia   POLYGON ((853787 3905499,...","category":"page"},{"location":"how_it_works/","page":"How it works","title":"How it works","text":"This data structure allows SimpleFeatures to:","category":"page"},{"location":"how_it_works/","page":"How it works","title":"How it works","text":"interface with GDAL and GEOS for fast I/O and operations (using using ArchGDAL.jl and LibGEOS.jl, respectively)\nprovide a preview of the geometry's WKT for viewing\nrepresent geometries (wkb) in Julia without needing to define a new SimpleFeatures type for each type of geometry. SimpleFeatures uses ArchGDAL geometry types for geometry type info.","category":"page"},{"location":"how_it_works/","page":"How it works","title":"How it works","text":"This package builds on existing Julia GIS packages GeoDataFrames and ArchGDAL.","category":"page"}]
}
