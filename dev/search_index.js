var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SimpleFeatures","category":"page"},{"location":"#SimpleFeatures","page":"Home","title":"SimpleFeatures","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SimpleFeatures.jl.","category":"page"},{"location":"#Working-with-simple-feature-GIS-data-in-Julia","page":"Home","title":"Working with simple feature GIS data in Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Reading, analyzing, manipulating, and writing vector GIS data in Julia. This package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Handles operations as a DataFrame (i.e., DataFrame in, DataFrame out)\nStores coordinate reference system (crs) info with the DataFrame and uses it automatically (DataFrames metadata)\nCreates new copies of Julia objects when performing functions (unless specified with a !)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package builds on existing Julia GIS packages GeoDataFrames and ArchGDAL.","category":"page"},{"location":"#Long-term-Goals","page":"Home","title":"Long-term Goals","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To provide full support for simple features access\nTo provide an intuitive workflow for reading, analyzing, manipulating, and writing vector GIS data in Julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"Inspired by the R package sf. This package is in Alpha and will change significantly in the future.","category":"page"},{"location":"#Reference","page":"Home","title":"Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SimpleFeatures]","category":"page"},{"location":"#SimpleFeatures.replace_metadata!-Tuple{DataFrames.DataFrame, DataFrames.DataFrame}","page":"Home","title":"SimpleFeatures.replace_metadata!","text":"replace_metadata!(x::DataFrame, y::DataFrame) Erases metadata from x and replaces with metadata from y\n\n\n\n\n\n","category":"method"},{"location":"#SimpleFeatures.st_buffer-Tuple{DataFrames.DataFrame, Number}","page":"Home","title":"SimpleFeatures.st_buffer","text":"st_buffer(x::DataFrame, d::Number; fn::Union{Nothing, AbstractString}=nothing, layer_name::AbstractString=\"data\", driver::Union{Nothing,AbstractString}=\"GPKG\", options::Dict{String,String}=Dict{String,String}(), geom_columns=(:geom,))\n\nCreate a new DataFrame that is buffered by the provided distance d in units of the crs. The resulting object is stored in memory as a GeoPackage by default, but a filename fn can be provided. The geom_column is expected to hold ArchGDAL geometries.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleFeatures.st_copy-Tuple{DataFrames.DataFrame}","page":"Home","title":"SimpleFeatures.st_copy","text":"st_copy(fn::AbstractString, table; layer_name=\"data\", geom_column=:geometry, crs::Union{GFT.GeoFormat,Nothing}=nothing, driver::Union{Nothing,AbstractString}=nothing, options::Vector{AbstractString}=[], geom_columns::Set{Symbol}=(:geometry))\n\nProduce a copy of the provided table and the associated underlying data to memory (or fn with associated inputs). The geom_column is expected to hold ArchGDAL geometries.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleFeatures.st_crs-Tuple{DataFrames.DataFrame}","page":"Home","title":"SimpleFeatures.st_crs","text":"st_crs(x::DataFrame) Extract the crs object from the DataFrame's metadata\n\n\n\n\n\n","category":"method"},{"location":"#SimpleFeatures.st_geomtype-Tuple{DataFrames.DataFrame}","page":"Home","title":"SimpleFeatures.st_geomtype","text":"st_geomtype(x::DataFrame) Extract the geometry type of the DataFrame from the DataFrame's metadata\n\n\n\n\n\n","category":"method"},{"location":"#SimpleFeatures.st_is_spdf-Tuple{DataFrames.DataFrame}","page":"Home","title":"SimpleFeatures.st_is_spdf","text":"stisspdf(x::DataFrame) Return if DataFrame contains crs metadata and geometry column (true) or is missing one or both items.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleFeatures.st_read-Tuple{AbstractString}","page":"Home","title":"SimpleFeatures.st_read","text":"st_read(fn::AbstractString; kwargs...)\nst_read(fn::AbstractString, layer::Union{Integer,AbstractString}; kwargs...)\n\nRead a file into a DataFrame. Any kwargs are passed onto ArchGDAL here. By default you only get the first layer, unless you specify either the index (0 based) or name (string) of the layer.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleFeatures.st_segmentize-Tuple{DataFrames.DataFrame, Number}","page":"Home","title":"SimpleFeatures.st_segmentize","text":"st_segmentize(x::DataFrame, max_length::Number; fn::Union{Nothing, AbstractString}=nothing, layer_name::AbstractString=\"data\", driver::Union{Nothing,AbstractString}=\"GPKG\", options::Dict{String,String}=Dict{String,String}(), geom_columns=(:geom,))\n\nCreate a new DataFrame that contains LineString geometries that have been sliced into lines of max_length. The resulting object is stored in memory as a GeoPackage by default, but a filename fn can be provided. The geom_column is expected to hold ArchGDAL geometries.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleFeatures.st_set_crs-Tuple{DataFrames.DataFrame, GeoFormatTypes.GeoFormat}","page":"Home","title":"SimpleFeatures.st_set_crs","text":"stsetcrs(x::DataFrame, crs::GFT.GeoFormat) Set the crs object within the DataFrame's metadata. Metadata will be created if it does not exist. This does not do any projection and will overwrite any existing crs info. To project to a different crs, see st_transform\n\n\n\n\n\n","category":"method"},{"location":"#SimpleFeatures.st_set_geomtype-Tuple{DataFrames.DataFrame, ArchGDAL.OGRwkbGeometryType}","page":"Home","title":"SimpleFeatures.st_set_geomtype","text":"stsetgeomtype(x::DataFrame) Set the geometry type of the DataFrame from the DataFrame's metadata\n\n\n\n\n\n","category":"method"},{"location":"#SimpleFeatures.st_transform-Tuple{DataFrames.DataFrame, GeoFormatTypes.GeoFormat}","page":"Home","title":"SimpleFeatures.st_transform","text":"st_transform(x::DataFrame, crs::GFT.GeoFormat; fn::Union{Nothing, AbstractString}=nothing, layer_name::AbstractString=\"data\", driver::Union{Nothing,AbstractString}=\"GPKG\", options::Dict{String,String}=Dict{String,String}(), geom_columns=(:geom,))\n\nCreate a new DataFrame that is projected to the provided crs. The resulting object is stored in memory as a GeoPackage by default, but a filename fn can be provided. The geom_column is expected to hold ArchGDAL geometries.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleFeatures.st_write-Tuple{AbstractString, Any}","page":"Home","title":"SimpleFeatures.st_write","text":"st_write(fn::AbstractString, table; layer_name=\"data\", geom_column=:geometry, crs::Union{GFT.GeoFormat,Nothing}=nothing, driver::Union{Nothing,AbstractString}=nothing, options::Vector{AbstractString}=[], geom_columns::Set{Symbol}=(:geometry))\n\nWrite the provided table to fn. The geom_column is expected to hold ArchGDAL geometries.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleFeatures.toProjJSON-Tuple{ArchGDAL.AbstractSpatialRef}","page":"Home","title":"SimpleFeatures.toProjJSON","text":"toProjJSON(spref::AbstractSpatialRef)\n\nConvert this SRS into ProjJSON format.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleFeatures.toWKT2-Tuple{ArchGDAL.AbstractSpatialRef}","page":"Home","title":"SimpleFeatures.toWKT2","text":"toWKT2(spref::AbstractSpatialRef)\n\nConvert this SRS into WKT2 format.\n\n\n\n\n\n","category":"method"}]
}
